//go:build postgres

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package internal

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type PubsubEventState string

const (
	PubsubEventStatePending   PubsubEventState = "pending"
	PubsubEventStateActive    PubsubEventState = "active"
	PubsubEventStateSucceeded PubsubEventState = "succeeded"
	PubsubEventStateFailed    PubsubEventState = "failed"
	PubsubEventStateRetry     PubsubEventState = "retry"
)

func (e *PubsubEventState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PubsubEventState(s)
	case string:
		*e = PubsubEventState(s)
	default:
		return fmt.Errorf("unsupported scan type for PubsubEventState: %T", src)
	}
	return nil
}

type NullPubsubEventState struct {
	PubsubEventState PubsubEventState `json:"pubsubEventState"`
	Valid            bool             `json:"valid"` // Valid is true if PubsubEventState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPubsubEventState) Scan(value interface{}) error {
	if value == nil {
		ns.PubsubEventState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PubsubEventState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPubsubEventState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PubsubEventState), nil
}

type PubsubFailAction string

const (
	PubsubFailActionRetrying     PubsubFailAction = "retrying"
	PubsubFailActionDeadLettered PubsubFailAction = "dead_lettered"
	PubsubFailActionFailed       PubsubFailAction = "failed"
)

func (e *PubsubFailAction) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PubsubFailAction(s)
	case string:
		*e = PubsubFailAction(s)
	default:
		return fmt.Errorf("unsupported scan type for PubsubFailAction: %T", src)
	}
	return nil
}

type NullPubsubFailAction struct {
	PubsubFailAction PubsubFailAction `json:"pubsubFailAction"`
	Valid            bool             `json:"valid"` // Valid is true if PubsubFailAction is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPubsubFailAction) Scan(value interface{}) error {
	if value == nil {
		ns.PubsubFailAction, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PubsubFailAction.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPubsubFailAction) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PubsubFailAction), nil
}

type PubsubTopic struct {
	ID                int64     `json:"id"`
	CreatedAt         time.Time `json:"createdAt"`
	Name              string    `json:"name"`
	MaxRetries        int64     `json:"maxRetries"`
	InitialBackoff    Duration  `json:"initialBackoff"`
	BackoffMax        Duration  `json:"backoffMax"`
	BackoffMultiplier float64   `json:"backoffMultiplier"`
	DlqEnabled        bool      `json:"dlqEnabled"`
	DlqMaxAge         Duration  `json:"dlqMaxAge"`
}
