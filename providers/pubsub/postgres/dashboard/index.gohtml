<div class="container is-fluid">
  {{if eq .Count 0}}
    <div class="container is-fluid">
      <div class="section">
        <div class="has-text-centered">
          <h1 class="title">Dead Letter Queue</h1>
          <h2 class="subtitle">The dead letter queue is empty!</h2>
          <div class="content">
            <p class="icon is-large has-text-grey-light">
              <i class="fas fa-check-circle" style="font-size: 4rem;"></i>
            </p>
          </div>
        </div>
      </div>
    </div>
  {{else}}
    <div class="table-container">
      <table class="table is-fullwidth is-striped is-hoverable">
        <thead>
          <tr>
            <th>
              <span class="icon-text">
                <span class="icon">
                  <i class="fas fa-clock"></i>
                </span>
                <span>Failed At</span>
              </span>
            </th>
            <th>
              <span class="icon-text">
                <span class="icon">
                  <i class="fas fa-tag"></i>
                </span>
                <span>Topic</span>
              </span>
            </th>
            <th>
              <span class="icon-text">
                <span class="icon">
                  <i class="fas fa-fingerprint"></i>
                </span>
                <span>Event ID</span>
              </span>
            </th>
            <th>
              <span class="icon-text">
                <span class="icon">
                  <i class="fas fa-calendar-plus"></i>
                </span>
                <span>Created</span>
              </span>
            </th>
            <th>
              <span class="icon-text">
                <span class="icon">
                  <i class="fas fa-exclamation-triangle"></i>
                </span>
                <span>Error</span>
              </span>
            </th>
            <th>
              <span class="icon-text">
                <span class="icon">
                  <i class="fas fa-envelope"></i>
                </span>
                <span>Message</span>
              </span>
            </th>
            <th>
              <span class="icon-text">
                <span class="icon">
                  <i class="fas fa-cogs"></i>
                </span>
                <span>Actions</span>
              </span>
            </th>
          </tr>
        </thead>
        <tbody>
          {{range .Events}}
            <tr>
              <td>
                <div class="content">
                  <time class="has-text-weight-semibold is-size-7" title="{{.DeadLetterCreatedAt.Format "2006-01-02T15:04:05Z07:00"}}">
                    {{.DeadLetterCreatedAt.Format "2006-01-02 15:04:05"}}
                  </time>
                  <small class="has-text-grey is-size-7">{{timeAgo .DeadLetterCreatedAt}}</small>
                </div>
              </td>
              <td>
                <span class="tag is-info is-light">{{.TopicName}}</span>
              </td>
              <td>
                <div class="content">
                  <code class="has-text-info" title="{{.CloudeventsID}}">
                    {{truncateEventID .CloudeventsID .TopicName}}
                  </code>
                </div>
              </td>
              <td>
                <div class="content">
                  <time class="has-text-weight-semibold is-size-7" title="{{.EventCreatedAt.Format "2006-01-02T15:04:05Z07:00"}}">
                    {{.EventCreatedAt.Format "2006-01-02 15:04:05"}}
                  </time>
                  <small class="has-text-grey is-size-7">{{timeAgo .EventCreatedAt}}</small>
                </div>
              </td>
              <td>
                <div class="content">
                  <span class="has-text-danger has-text-weight-semibold">
                    {{truncateError .ErrorMessage}}
                  </span>
                  {{if gt (len .ErrorMessage) 100}}
                    <br/>
                    <button type="button" class="button is-small is-text expand-error-btn" data-error-id="error-{{.DeadLetterID}}">
                      <span class="icon is-small">
                        <i class="fas fa-ellipsis-h"></i>
                      </span>
                      <span>Show more</span>
                    </button>
                    <div id="error-{{.DeadLetterID}}" class="dlq-error-hidden">
                      <div class="box has-background-danger-light mt-2">
                        <pre class="has-text-danger">{{.ErrorMessage}}</pre>
                      </div>
                    </div>
                  {{end}}
                </div>
              </td>
              <td>
                <div class="content">
                  <button type="button" class="button is-small view-message-btn" data-event-id="{{.CloudeventsID}}" data-message="{{.Message}}" data-headers="{{.Headers}}">
                    <span class="icon is-small">
                      <i class="fas fa-eye"></i>
                    </span>
                    <span>View Message</span>
                  </button>
                </div>
              </td>
              <td>
                <div class="field is-grouped">
                  <div class="control">
                    <button type="button" class="button is-small delete-btn" data-event-id="{{.CloudeventsID}}" title="Delete this dead letter">
                      <span class="icon is-small">
                        <i class="fas fa-trash"></i>
                      </span>
                    </button>
                  </div>
                  <div class="control">
                    <button type="button" class="button is-small retry-btn" data-event-id="{{.CloudeventsID}}" title="Retry this dead letter">
                      <span class="icon is-small">
                        <i class="fas fa-redo"></i>
                      </span>
                    </button>
                  </div>
                  <div class="control">
                    <button type="button" class="button is-small copy-btn" data-event-id="{{.CloudeventsID}}" title="Copy Event ID">
                      <span class="icon is-small">
                        <i class="fas fa-copy"></i>
                      </span>
                    </button>
                  </div>
                </div>
              </td>
            </tr>
          {{end}}
        </tbody>
      </table>
    </div>
    <!-- Message Modal -->
    <div id="message-modal" class="modal">
      <div class="modal-background"></div>
      <div class="modal-card">
        <header class="modal-card-head">
          <p class="modal-card-title">
            <span class="icon">
              <i class="fas fa-envelope"></i>
            </span>
            <span id="modal-event-id">Event Message</span>
          </p>
          <button class="delete" type="button" aria-label="close" onclick="closeModal()"></button>
        </header>
        <section class="modal-card-body">
          <div id="modal-headers-section" style="display: none;" class="mb-4">
            <h6 class="title is-6">
              <span class="icon">
                <i class="fas fa-tags"></i>
              </span>
              Headers
            </h6>
            <pre class="has-background-light p-3" style="white-space: pre-wrap; word-break: break-all; max-height: 300px; overflow-y: auto;"><code id="modal-headers" class="language-json"></code></pre>
          </div>
          <div>
            <h6 class="title is-6">
              <span class="icon">
                <i class="fas fa-file-code"></i>
              </span>
              Content
            </h6>
            <pre class="has-background-light p-3" style="white-space: pre-wrap; word-break: break-all; max-height: 500px; overflow-y: auto;"><code id="modal-content" class="language-json"></code></pre>
          </div>
        </section>
        <footer class="modal-card-foot">
          <button class="button" type="button" onclick="closeModal()">Close</button>
          <button class="button" type="button" onclick="copyModalContent()">
            <span class="icon">
              <i class="fas fa-copy"></i>
            </span>
            <span>Copy Content</span>
          </button>
        </footer>
      </div>
    </div>
  {{end}}
</div>
<!-- Prism.js for JSON syntax highlighting -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" rel="stylesheet"/>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-json.min.js"></script>
<style>
  /* Modal styling */
  .modal.is-active {
    z-index: 9999;
  }
  time {
    display: block !important;
    line-height: 1.1;
  }
  .modal-card {
    width: 95vw;
    max-width: 1200px;
    max-height: 90vh;
  }
  .modal-card-body {
    max-height: calc(90vh - 150px);
    overflow-y: auto;
  }
  .dlq-error-hidden {
    display: none !important;
  }
  .dlq-error-visible {
    display: block !important;
    animation: slideDown 0.3s ease-out;
  }
  /* Custom JSON styling */
  .language-json {
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace !important;
    font-size: 0.875rem !important;
    line-height: 1.5;
  }
  .language-json * {
    font-size: 0.875rem !important;
  }
  pre[class*="language-"] {
    background: #f8f9fa !important;
    border: 1px solid #e9ecef !important;
    border-radius: 0.375rem !important;
    padding: 1rem !important;
    margin: 0 !important;
    overflow-x: auto;
    max-height: 400px;
    overflow-y: auto;
  }
  /* Better JSON syntax highlighting */
  .token.property {
    color: #0550ae !important;
  }
  .token.string {
    color: #0a3069 !important;
  }
  .token.number {
    color: #8250df !important;
  }
  .token.boolean {
    color: #cf222e !important;
  }
  .token.null {
    color: #656d76 !important;
  }
</style>
<script>
  // Wait for DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', function() {
    // Event delegation for expand error buttons
    document.addEventListener('click', function(e) {
      if (e.target.closest('.expand-error-btn')) {
        e.preventDefault();
        const button = e.target.closest('.expand-error-btn');
        const errorId = button.dataset.errorId;
        const element = document.getElementById(errorId);
        if (element) {
          const isVisible = element.classList.contains('dlq-error-visible');
          const icon = button.querySelector('i');
          if (isVisible) {
            element.classList.remove('dlq-error-visible');
            element.classList.add('dlq-error-hidden');
            icon.className = 'fas fa-ellipsis-h';
            button.querySelector('span:last-child').textContent = 'Show more';
          } else {
            element.classList.remove('dlq-error-hidden');
            element.classList.add('dlq-error-visible');
            icon.className = 'fas fa-eye-slash';
            button.querySelector('span:last-child').textContent = 'Show less';
          }
        }
      }
    });

    // Event delegation for delete buttons
    document.addEventListener('click', function(e) {
      if (e.target.closest('.delete-btn')) {
        e.preventDefault();
        const button = e.target.closest('.delete-btn');
        const eventId = button.dataset.eventId;
        if (confirm('Are you sure you want to delete this dead letter? This action cannot be undone.')) {
          deleteDeadLetter(eventId);
        }
      }
    });

    // Event delegation for retry buttons
    document.addEventListener('click', function(e) {
      if (e.target.closest('.retry-btn')) {
        e.preventDefault();
        const button = e.target.closest('.retry-btn');
        const eventId = button.dataset.eventId;
        if (confirm('Are you sure you want to retry this dead letter?')) {
          retryDeadLetter(eventId);
        }
      }
    });

    // Event delegation for copy buttons
    document.addEventListener('click', function(e) {
      if (e.target.closest('.copy-btn')) {
        e.preventDefault();
        const button = e.target.closest('.copy-btn');
        const eventId = button.dataset.eventId;
        navigator.clipboard.writeText(eventId).then(function() {
          const originalIcon = button.querySelector('i');
          originalIcon.className = 'fas fa-check';
          setTimeout(() => {
            originalIcon.className = 'fas fa-copy';
          }, 1000);
        });
      }
    });

    // Event delegation for view message buttons
    document.addEventListener('click', function(e) {
      if (e.target.closest('.view-message-btn')) {
        e.preventDefault();
        const button = e.target.closest('.view-message-btn');
        const eventId = button.dataset.eventId;
        const message = button.dataset.message;
        const headers = button.dataset.headers;

        openModal(eventId, message, headers, button);
      }
    });

    // Modal close on background click
    document.addEventListener('click', function(e) {
      if (e.target.classList.contains('modal-background')) {
        closeModal();
      }
    });

    // Modal close on escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && document.getElementById('message-modal').classList.contains('is-active')) {
        closeModal();
      }
    });
  });

  function openModal(eventId, message, headers) {
    const modal = document.getElementById('message-modal');
    const modalEventId = document.getElementById('modal-event-id');
    const modalContent = document.getElementById('modal-content');
    const modalHeaders = document.getElementById('modal-headers');
    const modalHeadersSection = document.getElementById('modal-headers-section');

    // Set event ID
    modalEventId.textContent = 'Event: ' + eventId;

    // Format and set message content
    modalContent.textContent = formatJSONString(message);

    // Handle headers - check if headers exist and are not empty/null
    if (headers && headers.trim() && headers !== '{}' && headers !== 'null' && headers !== '""' && headers !== 'undefined') {
      modalHeaders.textContent = formatJSONString(headers);
      modalHeadersSection.style.display = 'block';
    } else {
      modalHeadersSection.style.display = 'none';
    }

    // Show modal
    modal.classList.add('is-active');
    document.body.classList.add('is-clipped');

    // Trigger syntax highlighting
    if (typeof Prism !== 'undefined') {
      Prism.highlightAllUnder(modal);
    }
  }

  function closeModal() {
    const modal = document.getElementById('message-modal');
    modal.classList.remove('is-active');
    document.body.classList.remove('is-clipped');
  }

  function copyModalContent() {
    const content = document.getElementById('modal-content').textContent;
    navigator.clipboard.writeText(content).then(function() {
      const button = event.target.closest('button');
      const originalText = button.querySelector('span:last-child').textContent;
      const originalIcon = button.querySelector('i');

      originalIcon.className = 'fas fa-check';
      button.querySelector('span:last-child').textContent = 'Copied!';

      setTimeout(() => {
        originalIcon.className = 'fas fa-copy';
        button.querySelector('span:last-child').textContent = originalText;
      }, 2000);
    });
  }

  function formatJSONString(jsonStr) {
    try {
      const obj = JSON.parse(jsonStr);
      return JSON.stringify(obj, null, 2);
    } catch (e) {
      return jsonStr;
    }
  }

  async function deleteDeadLetter(eventId) {
    try {
      const response = await fetch(`/_admin/api/dlq/${eventId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        // Show success notification
        showNotification('Dead letter deleted successfully', 'is-success');
        // Reload the page to refresh the data
        setTimeout(() => window.location.reload(), 1000);
      } else {
        throw new Error('Failed to delete dead letter');
      }
    } catch (error) {
      showNotification('Failed to delete dead letter: ' + error.message, 'is-danger');
    }
  }

  async function retryDeadLetter(eventId) {
    try {
      const response = await fetch(`/_admin/api/dlq/${eventId}/retry`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        // Show success notification
        showNotification('Dead letter retried successfully', 'is-success');
        // Reload the page to refresh the data
        setTimeout(() => window.location.reload(), 1000);
      } else {
        throw new Error('Failed to retry dead letter');
      }
    } catch (error) {
      showNotification('Failed to retry dead letter: ' + error.message, 'is-danger');
    }
  }

  function showNotification(message, type) {
    const notification = document.createElement('div');
    notification.className = `notification ${type} is-fixed` ;
    notification.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 1000; min-width: 300px;';
    notification.innerHTML = `
      <button class="delete" onclick="this.parentElement.remove()"></button>
      ${message}
    `;
    document.body.appendChild(notification);

    // Auto-remove after 5 seconds
    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 5000);
  }
</script>
