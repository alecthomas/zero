// Code generated by zero. DO NOT EDIT.
package main

import (
  "database/sql"
  "context"
  "fmt"
  "github.com/alecthomas/zero"
  impc24ab568b6f3f934 "github.com/alecthomas/zero/providers/sql"
  "net/http"
  "reflect"
)

// Config contains combined Kong configuration for all types in [Construct].
type ZeroConfig struct {
	Config6fab5aa5f9534d38 impc24ab568b6f3f934.Config `embed:""`
	Config9c6b7595816de4c ServiceConfig `embed:""`
}

// Construct an instance of T.
func ZeroConstruct[T any](ctx context.Context, config ZeroConfig) (out T, err error) {
	return ZeroConstructSingletons[T](ctx, config, map[reflect.Type]any{})
}

// ZeroConstructSingletons constructs a new instance of T, or returns an instance of T from "singletons" if already constructed.
func ZeroConstructSingletons[T any](ctx context.Context, config ZeroConfig, singletons map[reflect.Type]any) (out T, err error) {
	if singleton, ok := singletons[reflect.TypeFor[T]()]; ok {
		return singleton.(T), nil
	}
	defer func() { singletons[reflect.TypeFor[T]()] = out }()
	switch any(out).(type) {
	case context.Context:
		return any(ctx).(T), nil

	case *impc24ab568b6f3f934.Config: // Handle pointer to config.
		return any(&config.Config6fab5aa5f9534d38).(T), nil

	case impc24ab568b6f3f934.Config:
		return any(config.Config6fab5aa5f9534d38).(T), nil

	case *ServiceConfig: // Handle pointer to config.
		return any(&config.Config9c6b7595816de4c).(T), nil

	case ServiceConfig:
		return any(config.Config9c6b7595816de4c).(T), nil

	case *sql.DB:
		p0, err := ZeroConstructSingletons[impc24ab568b6f3f934.Config](ctx, config, singletons)
		if err != nil {
			return out, err
		}
		o, err := impc24ab568b6f3f934.New(p0)
		if err != nil {

			return out, fmt.Errorf("*sql.DB: %w", err)
		}
		return any(o).(T), nil

	case *Service:
		p0, err := ZeroConstructSingletons[*DAL](ctx, config, singletons)
		if err != nil {
			return out, err
		}
		p1, err := ZeroConstructSingletons[ServiceConfig](ctx, config, singletons)
		if err != nil {
			return out, err
		}
		o, err := NewService(p0, p1)
		if err != nil {

			return out, fmt.Errorf("*Service: %w", err)
		}
		return any(o).(T), nil

	case *DAL:
		p0, err := ZeroConstructSingletons[*sql.DB](ctx, config, singletons)
		if err != nil {
			return out, err
		}
		o := NewDAL(p0)
		return any(o).(T), nil

	case *http.ServeMux:
		r0, err := ZeroConstructSingletons[*Service](ctx, config, singletons)
		if err != nil {
			return out, fmt.Errorf("*http.ServeMux: %w", err)
		}
		mux := http.NewServeMux()
		mux.Handle("GET /users", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			out, herr := r0.ListUsers()
			_ = zero.EncodeResponse[[]User](r, w, out, herr)
		}))
		// Parameters for the Authenticate middleware
		m0p0 := "admin"
		mux.Handle("POST /users", Authenticate(m0p0)(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			p0, err := zero.DecodeRequest[User]("POST", r)
			if err != nil {
				http.Error(w, fmt.Sprintf("Invalid request: %s", err), http.StatusBadRequest)
				return
			}
			herr := r0.CreateUser(p0)
			_ = zero.EncodeResponse[zero.EmptyResponse](r, w, nil, herr)
		})))
		mux.Handle("GET /users/{id}", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			p0 := r.PathValue("id")
			out, herr := r0.GetUser(p0)
			_ = zero.EncodeResponse[User](r, w, out, herr)
		}))
		return any(mux).(T), nil

	}
	return out, fmt.Errorf("don't know how to construct %T", out)
}
